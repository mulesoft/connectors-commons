package $modeledClass.basePackage;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.frontend.ClientProxyFactoryBean;
import org.apache.cxf.jaxws.JaxWsClientFactoryBean;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.components.ConnectionManagement;
import org.mule.api.annotations.display.Placement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


#foreach($import in $modeledClass.imports)
import ${import};
#end

@ConnectionManagement(configElementName="ntlm-connection-config", friendlyName="NTLM Connection")
public class ${modeledClass.name} extends ${modeledClass.baseConfigClass.name} {

    private static final Logger logger = LoggerFactory.getLogger(${modeledClass.name}.class);

    @Configurable
    @Placement(order = 3)
    private String domain;

    public $modeledClass.client createClient(String username, String password) {
        logger.info("Configuring NTLM.");

        //Set the jcifs properties
        jcifs.Config.setProperty("jcifs.smb.client.domain", domain);
        jcifs.Config.setProperty("jcifs.netbios.wins", "xxx.xxx.xxx.xxx");
        jcifs.Config.setProperty("jcifs.smb.client.soTimeout", "300000"); // 5 minutes
        jcifs.Config.setProperty("jcifs.netbios.cachePolicy", "1200"); // 20 minutes
        jcifs.Config.setProperty("jcifs.smb.client.username", username);
        jcifs.Config.setProperty("jcifs.smb.client.password", password);

        // Register the jcifs URL handler to enable NTLM
        jcifs.Config.registerSmbURLHandler();

        ClientProxyFactoryBean factory = new ClientProxyFactoryBean(new JaxWsClientFactoryBean());

        factory.setServiceClass( ${modeledClass.service}.class );
        factory.setAddress(getEndpoint());
        factory.setUsername(username);
        factory.setPassword(password);
        ${modeledClass.service} service = (${modeledClass.service}) factory.create();

        Client client = ClientProxy.getClient(service);
        HTTPConduit http = (HTTPConduit) client.getConduit();
        logger.info(http.getClass().getName());

        HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
        httpClientPolicy.setConnectionTimeout(36000);
        httpClientPolicy.setAllowChunking(false);

        http.setClient(httpClientPolicy);
        http.getAuthorization().setAuthorizationType("NTLM");
        http.getAuthorization().setUserName(username);
        http.getAuthorization().setPassword(password);

        http.getClient().setAllowChunking( false );
        http.getClient().setAutoRedirect( true );
        logger.info("Connection ready.");
        return service.${modeledClass.clientRetrievalMethod}();
    }

    public String getDomain() {
        return domain;
    }

    public void setDomain(String domain) {
        this.domain = domain;
    }

}
